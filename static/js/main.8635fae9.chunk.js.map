{"version":3,"sources":["utils/Stack.ts","utils/Calculator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Stack","l","this","length","index","v","Error","it","push","empty","p","pop","Token","type","num","op","priorityMap","priority","r","operate","a","b","NaN","calc","src","tokens","i","j","n","parseInt","substring","setNum","setOp","parseTokens","console","log","tailTokens","tk","st","size","at","top","excahnge","result","calculate","Search","Input","App","re","useRef","className","placeholder","onSearch","value","current","innerText","toString","enterButton","ref","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8635fae9.chunk.js","sourcesContent":["class Stack<T> {\n  constructor() {\n    this.l = [];\n  }\n  l: T[];\n  size(): number {\n    return this.l.length;\n  }\n  at(index: number): T {\n    let v = this.l[index];\n    if (v) return v;\n    else throw Error(\"index overflow.\");\n  }\n  empty(): boolean {\n    return this.l.length === 0;\n  }\n  push(it: T): number {\n    return this.l.push(it);\n  }\n  top(): T {\n    if (this.empty()) {\n      throw Error(\"empty stack.\");\n    } else return this.l[this.l.length - 1];\n  }\n  pop(): T {\n    let p = this.l.pop();\n    if (p) return p;\n    else throw Error(\"empty stack.\");\n  }\n}\n\nexport default Stack;\n","import Stack from \"./Stack\";\n\nexport class Token {\n  setNum(num: number) {\n    this.type = \"num\";\n    this.num = num;\n    return this;\n  }\n  setOp(op: string) {\n    this.type = \"op\";\n    this.op = op;\n    return this;\n  }\n  type?: \"op\" | \"num\";\n  num: number = 0;\n  op: string = \"\";\n}\n\nexport function parseTokens(src: string): Stack<Token> {\n  let r: Stack<Token> = new Stack();\n  for (let i = 0; i < src.length; ++i) {\n    if (src[i] >= \"0\" && src[i] <= \"9\") {\n      let j = i;\n      while (src[j] >= \"0\" && src[j] <= \"9\" && j < src.length) ++j;\n      let n = parseInt(src.substring(i, j));\n      r.push(new Token().setNum(n));\n      i = j - 1;\n    } else if (\n      src[i] === \"+\" ||\n      src[i] === \"-\" ||\n      src[i] === \"*\" ||\n      src[i] === \"/\" ||\n      src[i] === \"(\" ||\n      src[i] === \")\"\n    ) {\n      r.push(new Token().setOp(src[i]));\n    }\n  }\n  return r;\n}\n\nconst priorityMap: Record<string, number> = {\n  \"(\": 0,\n  \"+\": 1,\n  \"-\": 1,\n  \"*\": 2,\n  \"/\": 2,\n};\n\n//l<=r?\nfunction priority(l: string, r: string): boolean {\n  return priorityMap[l] <= priorityMap[r];\n}\n\nexport function excahnge(tk: Stack<Token>): Stack<Token> {\n  let r: Stack<Token> = new Stack();\n  let st: Stack<Token> = new Stack();\n  for (let i = 0; i < tk.size(); ++i) {\n    if (tk.at(i).type === \"num\") {\n      r.push(tk.at(i));\n    } else if (tk.at(i).type === \"op\") {\n      if (st.empty() || tk.at(i).op === \"(\") {\n        st.push(tk.at(i));\n      } else {\n        if (tk.at(i).op === \")\") {\n          while (!st.empty() && st.top().op !== \"(\") {\n            r.push(st.pop());\n          }\n          st.pop();\n        } else {\n          if (priority(tk.at(i).op, st.top().op)) {\n            r.push(st.pop());\n            while (!st.empty()) {\n              if (priority(tk.at(i).op, st.top().op)) {\n                r.push(st.pop());\n              } else break;\n            }\n            st.push(tk.at(i));\n          } else {\n            st.push(tk.at(i));\n          }\n        }\n      }\n    }\n  }\n  while (!st.empty()) {\n    r.push(st.pop());\n  }\n  return r;\n}\n\nfunction operate(a: number, b: number, op: string): number {\n  switch (op) {\n    case \"+\":\n      return a + b;\n    case \"-\":\n      return a - b;\n    case \"*\":\n      return a * b;\n    case \"/\":\n      return a / b;\n    default:\n      return NaN;\n  }\n}\n\nexport function calculate(tk: Stack<Token>): number {\n  let st: Stack<Token> = new Stack();\n  for (let i = 0; i < tk.size(); ++i) {\n    if (tk.at(i).type === \"num\") {\n      st.push(tk.at(i));\n    } else if (tk.at(i).type === \"op\") {\n      let a = st.pop();\n      let b = st.pop();\n      st.push(\n        new Token().setNum(operate(b?.num || 0, a?.num || 0, tk.at(i).op))\n      );\n    }\n  }\n  return st.empty() ? NaN : st.top().num;\n}\n\nexport function calc(src: string): number {\n  let tokens = parseTokens(src);\n  console.log(\"tokens: \", tokens);\n  let tailTokens = excahnge(tokens);\n  console.log(\"tailTokens\", tailTokens);\n  let result = calculate(tailTokens);\n  console.log(\"result\", result);\n  return result;\n}\n","import React, { useRef } from \"react\";\nimport \"./App.css\";\nimport { calc } from \"./utils/Calculator\";\nimport { Input } from \"antd\";\n\nconst { Search } = Input;\n\nfunction App() {\n  let re = useRef<HTMLDivElement>(null);\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <Search\n          placeholder=\"input expression\"\n          onSearch={(value) => {\n            let r = calc(value);\n            if (re.current) {\n              re.current.innerText = \"result: \" + r.toString();\n            }\n          }}\n          enterButton=\"OK\"\n        />\n        <div ref={re} className=\"result\">\n          result:\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}